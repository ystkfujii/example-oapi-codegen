// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// Name defines model for Name.
type Name struct {
	First  string  `json:"first"`
	Last   string  `json:"last"`
	Middle *string `json:"middle,omitempty"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Age  int  `json:"age"`
	Name Name `json:"name" tag1:"value1" tag2:"value2"`
}

// User defines model for User.
type User struct {
	Age  int  `json:"age"`
	Id   int  `json:"id"`
	Name Name `json:"name" tag1:"value1" tag2:"value2"`
}

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = NewUser

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete a user by ID
	// (DELETE /users/{id})
	DeleteUsersId(ctx echo.Context, id int) error
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersId(ctx, id)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8R0b5VsyXEO1S1pitbFYhGgu5cGKTAxxzIXEqklR4ndQP+9ICl/Ra7b",
	"BbxNDs0llMKZee/Nm1GeYW7qxmjS7KB4BjdfUo3h+JO1xvpDY01DlhWF13Mjyf+W5OZWNayMhgJ++fjx",
	"VjhGbp0INxKgFdZNRVBMs2kCvG4IClCaqSQLXQKSGFXlhrmupFT+iJUgj0Fsbu7lhE+OrHhSvBSzG5FP",
	"LoQ05IQ2LGilHMO2omOrdOkL1uQclkfAB6Zi8+dBFZ90YVoth0m7BCx9aZUlCcUd9Mw3me63983DZ5qz",
	"B/EBaxqKulDWsT/sSl+bB58KV+9Jl7yEIs+yBGqlt88JNMhM1lP44w7TP6/S3++/f3eMeoUv0/9WK16e",
	"r0CtpKzosMSv50r/QuUoVk9qoHECq9Rgo1LfjJJ0Siu2mDKWQWnGMocCHrFqKfelsJxsnieh1Ad68m0f",
	"Nqn3zpbg5DLwU3VbQ5FfBnLxITvmd913/p2lBRTw3Xg3eeN+7MbBHS/5hsAE/s5R/w7sxVdhVfIgON8L",
	"/iH87CXIz0pW+Sk7ydhHKL0wRxaHcMoDFkqnNdXGrsXV7Uws/HCjxlLpUrSOrBv5xivejfjV7QwSeCTr",
	"YqZ8lI0yz8M0pLFRUMDFKBtdQPDsMig8Dqn8qaQwXF5+9FBmEgr4mfhTuOD5ucZoFxszybK4RjWTDnHY",
	"NJWah8jxZ+frb/awPymm2v2TlMED3VYqtBbXUalDhd4rx8Isogo+4PIr0ZwCET8YR6rOtJ9yrIQj+0g2",
	"bvXQedfWNdp1lEtgVe2QNcYdUfXWuD1Zv7Tk+NrI9dk4bIa/O/Ql25a6QSPzs5Xd1TxU7kdLyCSDKl6U",
	"6X/RrmuUotdWpELpR6yUFEo3Lb8py0RxBApNT71CXdKP5fhZyS5uiIqYhka6Ce+DlWYyjLXFmjhM9N0z",
	"KA/Cj/pmGxVxMx1aItmjeWofdvcD70yH6ytsoohXvnKzvYZidhNRTL89ihf/Z70ll0WjCIyaPKx7WU7u",
	"/FdxVPbNt1Ho0rZD/9vzzXw3D7zZdd1fAQAA///HD67l1g0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
