openapi: 3.0.3
info:
  title: User API
  description: A simple in-memory API for managing users.
  version: "1.0.0"

paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          maximum: 999999
          example: 1
        name:
          $ref: '#/components/schemas/Name'
        age:
          type: integer
          minimum: 0
          maximum: 15
          example: 3
      required:
        - id
        - name
        - age

    NewUser:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        age:
          type: integer
          minimum: 0
          maximum: 15
          example: 25
      required:
        - name
        - age
    Name:
      type: object
      properties:
        first:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z]+$"
          example: "Bob"
        middle:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z]+$"
          example: "J"
        last:
          type: string
          minLength: 1
          maxLength: 100
          pattern: "^[a-zA-Z]+$"
          example: "Smith"
      required:
        - first
        - last
      x-oapi-codegen-extra-tags:
        tag1: value1
        tag2: value2
      
